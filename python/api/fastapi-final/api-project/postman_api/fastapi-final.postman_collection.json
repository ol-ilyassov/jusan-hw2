{
	"info": {
		"_postman_id": "4caf76f1-b64f-47c2-8eb0-2c20d38bda62",
		"name": "fastapi-final",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21057353"
	},
	"item": [
		{
			"name": "/sum1n/{n}",
			"item": [
				{
					"name": "tests",
					"item": [
						{
							"name": "Получить сумму от 1 до 10 = 55.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('result');",
											"});",
											"",
											"",
											"pm.test(\"Result is of type number\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.result).to.be.a('number');",
											"});",
											"",
											"",
											"pm.test(\"Result is equal to 55\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.result).to.equal(55);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}:{{port}}/sum1n/10",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"sum1n",
										"10"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получить ошибку: n must be a non-negative integer.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('error');",
											"});",
											"",
											"",
											"pm.test(\"Result is equal to appropriate error message\", function () {",
											"    const responseData = pm.response.json();",
											"    const err_msg = \"n must be a non-negative integer\"",
											"",
											"    pm.expect(responseData.error).to.equal(err_msg);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}:{{port}}/sum1n/-1",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"sum1n",
										"-1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/sum1n/{n}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{port}}/sum1n/10",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"sum1n",
								"10"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/fibo?n={n}",
			"item": [
				{
					"name": "tests",
					"item": [
						{
							"name": "Получить число фибоначчи на позиции 5.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('result');",
											"});",
											"",
											"",
											"pm.test(\"Result is of type number\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.result).to.be.a('number');",
											"});",
											"",
											"",
											"pm.test(\"Result is equal to 3\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.result).to.equal(3);",
											"});",
											"",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}:{{port}}/fibo?n=5",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"fibo"
									],
									"query": [
										{
											"key": "n",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получить ошибку: n must be a positive integer.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('error');",
											"});",
											"",
											"",
											"pm.test(\"Result is equal to appropriate error message\", function () {",
											"    const responseData = pm.response.json();",
											"    const err_msg = \"n must be a positive integer\"",
											"",
											"    pm.expect(responseData.error).to.equal(err_msg);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}:{{port}}/fibo?n=-1",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"fibo"
									],
									"query": [
										{
											"key": "n",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/fibo?n={n}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{port}}/fibo?n=5",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"fibo"
							],
							"query": [
								{
									"key": "n",
									"value": "5"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/reverse",
			"item": [
				{
					"name": "tests",
					"item": [
						{
							"name": "Получить строку: 'olleh'.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('result');",
											"});",
											"",
											"",
											"pm.test(\"Result is of type string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.result).to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Result is equal to 'olleh'\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.result).to.equal('olleh');",
											"});",
											"",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "String",
										"value": "hello",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}:{{port}}/reverse",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"reverse"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/reverse (Header 'string')",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "String",
								"value": "value",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}:{{port}}/reverse",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"reverse"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/list",
			"item": [
				{
					"name": "tests",
					"item": [
						{
							"name": "Получить пустой массив.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('result');",
											"});",
											"",
											"",
											"pm.test(\"Result is of type array\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.result).to.be.a('array');",
											"});",
											"",
											"",
											"pm.test(\"Result is equal to empty\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.result).length(0);",
											"});",
											"",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}:{{port}}/list",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавить 'Apple' в массив.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"element\": \"Apple\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}/list",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получить массив со значением 'Apple'.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('result');",
											"});",
											"",
											"",
											"pm.test(\"Result is of type array\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.result).to.be.a('array');",
											"});",
											"",
											"",
											"pm.test(\"Result is not empty array\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.result).length.greaterThan(0);",
											"});",
											"",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}:{{port}}/list",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"list"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{port}}/list",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"element\": \"Apple\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}/list",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"list"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/calculator",
			"item": [
				{
					"name": "tests",
					"item": [
						{
							"name": "Выполнить корректную операцию: 1+1.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('result');",
											"});",
											"",
											"",
											"pm.test(\"Result is of type number\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.result).to.be.a('number');",
											"});",
											"",
											"",
											"pm.test(\"Result is equal to 2.0\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.result).to.equal(2.0);",
											"});",
											"",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"expr\": \"1,+,1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}/calculator",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"calculator"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ввести неправильное коль-во параметров.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('error');",
											"});",
											"",
											"",
											"pm.test(\"Result is equal to appropriate error message\", function () {",
											"    const responseData = pm.response.json();",
											"    const err_msg = \"invalid\"",
											"",
											"    pm.expect(responseData.error).to.equal(err_msg);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"expr\": \"1,+,1,a\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}/calculator",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"calculator"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ввести неправильную операцию.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('error');",
											"});",
											"",
											"",
											"pm.test(\"Result is equal to appropriate error message\", function () {",
											"    const responseData = pm.response.json();",
											"    const err_msg = \"invalid\"",
											"",
											"    pm.expect(responseData.error).to.equal(err_msg);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"expr\": \"1,a,1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}/calculator",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"calculator"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ввести не числовое значение.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('error');",
											"});",
											"",
											"",
											"pm.test(\"Result is equal to appropriate error message\", function () {",
											"    const responseData = pm.response.json();",
											"    const err_msg = \"invalid\"",
											"",
											"    pm.expect(responseData.error).to.equal(err_msg);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"expr\": \"a,+,1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}/calculator",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"calculator"
									]
								}
							},
							"response": []
						},
						{
							"name": "Произвести деление на 0.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('error');",
											"});",
											"",
											"",
											"pm.test(\"Result is equal to appropriate error message\", function () {",
											"    const responseData = pm.response.json();",
											"    const err_msg = \"zerodiv\"",
											"",
											"    pm.expect(responseData.error).to.equal(err_msg);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"expr\": \"1,/,0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}/calculator",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"calculator"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/calculator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"expr\": \"1,+,1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}/calculator",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"calculator"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://127.0.0.1",
			"type": "string"
		},
		{
			"key": "port",
			"value": "8000",
			"type": "string"
		}
	]
}